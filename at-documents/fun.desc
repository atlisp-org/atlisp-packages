(("access:new" "新建数据库\n参    数:files:数据库文件存储路径" "(access:new files)" "1 files  : 未明确定义\n" "成功返回t，失败nil" "(access:New \"C:\\AA.MDB\")")
("access:open" "使用Ado访问数据库\n参    数:AccessFilename:数据库文件路径" "(access:open accessfilename)" "1 accessfilename  : 未明确定义\n" "数据库对象" "(access:Open \"C:\\AA.MDB\")")
("access:select" "数据库运行Sql查询\n参数:Accessobject:数据库对象\n参数:SQL:SQL查询语句字符串" "(access:select accessobject sql)" "1 accessobject  : 未明确定义\n2 sql  : 未明确定义\n" "查询的结果表" "(Access:Select access \"select * from 点表\")")
("access:close" "关闭数据库\n参    数:Accessobject:数据库对象" "(access:close accessobject)" "1 accessobject  : 未明确定义\n" "无" "(access:Close Accessobject)")
("access:parse" "将普通列表转换为数据库可识别的sql语句格式的字符串\n参数:lst:列表" "(access:parse lst)" "1 lst  : 列表\n" "sql语句格式的字符串" "(Access:Parse lst)")
("access:execute" "运行sql语句，如更新/删除/创建表单\n参    数:Accessobject:数据库对象\n参    数:sql:sql语句字符串" "(access:execute accessobject sql)" "1 accessobject  : 未明确定义\n2 sql  : 未明确定义\n" "sql语句执行的结果" "(Access:Execute access \"UPDATE 点表 SET 管线种类 = '污水1' WHERE 物探点号 = 'WS1'\")")
("base64:encode" "" "(base64:encode lst-uint8)" "1 lst-uint8  : 列表\n" "" "")
("base64:decode" "Decode base64 string" "(base64:decode str-base64)" "1 str-base64  : 字符串\n" "list of unsigned 8bit integer" "")
("base64:encode-from-file" "" "(base64:encode-from-file file)" "1 file  : 未明确定义\n" "" "")
("base64:base64-to-file" "" "(base64:base64-to-file file str-base64)" "1 file  : 未明确定义\n2 str-base64  : 字符串\n" "" "")
("block:set-attributes" "设置块属性值" "(block:set-attributes blk lst)" "1 blk  : 块图元/对象\n2 lst  : 列表\n" "" "")
("block:get-dynamic-properties" "获取动态块的动态特性(自定义)列表：属性名，当前值，只读性，是否显示，允许值" "(block:get-dynamic-properties blk)" "1 blk  : 块图元/对象\n" "" "")
("block:get-effectivename" "取得块真实名称，支持 MAC" "(block:get-effectivename blk)" "1 blk  : 块图元/对象\n" "" "")
("block:set-dynprop" "设置动态块特性值" "(block:set-dynprop blk prp val)" "1 blk  : 块图元/对象\n2 prp  : 块特性\n3 val  : 值\n" "" "")
("block:ssget" "选择满足指定属性标记及对应值的块\n参数: blknames 块名，或块名列表\n参数: lst-attr 属性名与值的点对表" "(block:ssget blknames lst-attr)" "1 blknames  : 块名称\n2 lst-attr  : 列表\n" "满足条件的选择集" "(block:ssget '(\"块1\" \"块2\") '((\"属性1\" . \"值1\")(\"属性2\" . \"值2\")))")
("block:insert" "插入块参照，\nblkname 块名，\npath 块文件路径， \npt 插入点, \nang 旋转角度，\nscale 比例。" "(block:insert blkname path pt ang scale)" "1 blkname  : 块名称\n2 path  : 文件路径\n3 pt  : 单个2D/3D坐标点\n4 ang  : 角度值\n5 scale  : 比例值\n" "块实体" "")
("block:get-dynamic-prop-cons-name-value" "获取动态块的动态特性(自定义)列表：特性名与当前值的点对表" "(block:get-dynamic-prop-cons-name-value blk)" "1 blk  : 块图元/对象\n" "" "")
("block:get-attributes" "获取块属性,返回属性名和值的点对列表。" "(block:get-attributes blk)" "1 blk  : 块图元/对象\n" "" "")
("clipboard:setdata" "设置剪贴板内容为 str." "(clipboard:setdata str)" "1 str  : 字符串\n" "" "")
("clipboard:getdata" "获取剪贴板内容" "(clipboard:getdata )" "None" "" "")
("clipboard:cleardata" "清空剪贴板内容" "(clipboard:cleardata )" "None" "" "")
("color:rgb" "计算RGB颜色对应的整数值。Red Green Blue 取值范围为 [0,255]的整数或[0,1)的小数。" "(color:rgb red green blue)" "1 red  : 未明确定义\n2 green  : 未明确定义\n3 blue  : 未明确定义\n" "RGB颜色值" "(color:rgb 255 0 0) or (color:rgb 0.999 0 0);红色")
("color:aci2rgb" "索引色转RGB," "(color:aci2rgb aci)" "1 aci  : 未明确定义\n" "" "")
("curve:subsegment-picked-points" "多段线所点击子段的两端点列表" "(curve:subsegment-picked-points obj p)" "1 obj  : activeX 对象\n2 p  : 未明确定义\n" "" "")
("curve:length" "参数curve:曲线，直线、圆弧、圆、多段线、优化多段线、样条曲线等图元" "(curve:length curve)" "1 curve  : 曲线\n" "曲线的长度" "(curve:Length (car (entsel)))")
("curve:midpoint" "求曲线中点" "(curve:midpoint curve)" "1 curve  : 曲线\n" "中点坐标" "(curve:midpoint (car (entsel)))")
("curve:inters" "获取对象交点列表\n参数 obj1 obj2 : 选择集，vla对象，图元名，vla对象表，图元表，nil\n参数 mode: 该参数只有obj1、obj2为图元或vla对象时，服从下列设置，其他情况均默认对象不延伸\n           obj1 和 obj2 参数可任意组合，但不能全为nil\n           acExtendNone 对象不延伸\n           acExtendThisEntity 延伸obj1\n           acExtendOtherEntity 延伸obj2\n           acExtendBoth 对象都延伸\n           nil = acExtendNone 对象不延伸" "(curve:inters obj1 obj2 mode)" "1 obj1  : activeX 对象\n2 obj2  : activeX 对象\n3 mode  : 未明确定义\n" "对象交点列表" "(curve:inters obj1 obj2 acExtendNone)")
("curve:checkarc" "判断多段线是否有圆弧(凸度/=0)的子段" "(curve:checkarc en)" "1 en  : 单个图元\n" "" "")
("curve:subsegment-picked-type" "多段线子段图元类型" "(curve:subsegment-picked-type curve p)" "1 curve  : 曲线\n2 p  : 未明确定义\n" "" "")
("curve:subsegment-parameter" "多段线子段参数" "(curve:subsegment-parameter curve pt)" "1 curve  : 曲线\n2 pt  : 单个2D/3D坐标点\n" "" "")
("curve:pline-3dpoints" "多段线端点列表，返回三维点坐标" "(curve:pline-3dpoints ent)" "1 ent  : 单个图元\n" "三维点坐标列表" "(curve:pline-3dpoints (car (entsel)))")
("curve:subsegment-points" "多段线第n子段的端点坐标" "(curve:subsegment-points curve n)" "1 curve  : 曲线\n2 n  : 未明确定义\n" "" "")
("curve:o2bulge" "求圆心 O 和两点 pt1 pt2 表示的弧的凸度。目前暂时没有方向，及正负。" "(curve:o2bulge pt1 pt2 o)" "1 pt1  : 单个2D/3D坐标点\n2 pt2  : 单个2D/3D坐标点\n3 o  : 未明确定义\n" "" "")
("curve:pline-2dpoints" "多段线端点列表，返回二维点坐标,LWPOLYLINE组码本来就是二维点。" "(curve:pline-2dpoints ent)" "1 ent  : 单个图元\n" "二维点坐标列表" "(curve:Pline-2dpoints (car (entsel)))")
("curve:point-firstangle" "曲线一点的切线方向的角度" "(curve:point-firstangle obj pt)" "1 obj  : activeX 对象\n2 pt  : 单个2D/3D坐标点\n" "" "")
("curve:ptoncurve" "判断点是否在曲线上" "(curve:ptoncurve pt curve)" "1 pt  : 单个2D/3D坐标点\n2 curve  : 曲线\n" "T or nil" "(curve:PtOnCurve (getpoint) (car (entsel)))")
("curve:pline-convexity" "多段线端点列表，返回三维点坐标" "(curve:pline-convexity ent)" "1 ent  : 单个图元\n" "" "")
("curve:param-secondangle" "曲线参数param处的法线方向的角度" "(curve:param-secondangle obj param)" "1 obj  : activeX 对象\n2 param  : 未明确定义\n" "" "")
("curve:param-firstangle" "曲线参数param处的切线方向的角度" "(curve:param-firstangle obj param)" "1 obj  : activeX 对象\n2 param  : 未明确定义\n" "" "")
("curve:bulge2o" "求凸度bulge 和两点 pt1 pt2 表示的弧的圆心。" "(curve:bulge2o pt1 pt2 bulge)" "1 pt1  : 单个2D/3D坐标点\n2 pt2  : 单个2D/3D坐标点\n3 bulge  : 未明确定义\n" "" "")
("curve:circle2lwpl" "将圆转换成 由 int 段组成的多段线" "(curve:circle2lwpl ent-circle int)" "1 ent-circle  : 单个图元\n2 int  : 整数\n" "多段线图元" "")
("curve:join" "合并多段线函数" "(curve:join entlst fuzz)" "1 entlst  : 单个图元\n2 fuzz  : 容差\n" "return:合并后的多段线图元名" "example:(curve:join '(ent1 ent2 ent3 ..) 0.000001)\n   (curve:join (ssget) 0.000001)\n")
("curve:pt-in-arc-p" "判断 点 pt 是否在 pt1 pt2 及 凸度 表示的圆弧上。" "(curve:pt-in-arc-p pt pt1 pt2 convexity)" "1 pt  : 单个2D/3D坐标点\n2 pt1  : 单个2D/3D坐标点\n3 pt2  : 单个2D/3D坐标点\n4 convexity  : 未明确定义\n" "" "")
("curve:rectangle-center" "矩形中点坐标" "(curve:rectangle-center en)" "1 en  : 单个图元\n" "" "")
("curve:lwpl-turn-clockwise" "反转多段线，调整顺时针或逆时针方向。" "(curve:lwpl-turn-clockwise ent)" "1 ent  : 单个图元\n" "新多段线图元" "")
("curve:subsegment-picked-param" "多段线所点击子段参数" "(curve:subsegment-picked-param obj p)" "1 obj  : activeX 对象\n2 p  : 未明确定义\n" "" "")
("curve:pickclosepointto" "多段线上距离点击点最近的一个顶点" "(curve:pickclosepointto obj p)" "1 obj  : activeX 对象\n2 p  : 未明确定义\n" "" "")
("curve:clockwisep" "判断多段线方向" "(curve:clockwisep ent)" "1 ent  : 单个图元\n" "顺时针返回t，反之nil" "(curve:clockwisep (car(entsel)))")
("curve:subsegments" "多段线子段数量" "(curve:subsegments obj)" "1 obj  : activeX 对象\n" "" "")
("curve:putclosed" "使多段线封闭" "(curve:putclosed obj)" "1 obj  : activeX 对象\n" "无" "(curve:putClosed (car (entsel)))")
("curve:point-secondangle" "曲线一点的法线方向的角度" "(curve:point-secondangle obj pt)" "1 obj  : activeX 对象\n2 pt  : 单个2D/3D坐标点\n" "" "")
("curve:subsegment-length" "多段线子段长度" "(curve:subsegment-length obj pt1 pt2)" "1 obj  : activeX 对象\n2 pt1  : 单个2D/3D坐标点\n3 pt2  : 单个2D/3D坐标点\n" "" "")
("dcl:edit-box-and-desc" "" "(dcl:edit-box-and-desc key label desc)" "1 key  : 未明确定义\n2 label  : 未明确定义\n3 desc  : 未明确定义\n" "" "")
("dcl:edit-box" "" "(dcl:edit-box key label)" "1 key  : 未明确定义\n2 label  : 未明确定义\n" "" "")
("entity:make-dimstyle" "创建标注样式,name:标注样式名" "(entity:make-dimstyle name)" "1 name  : 未明确定义\n" "" "")
("entity:linetypes" "" "(entity:linetypes )" "None" "" "")
("entity:make-arrow" "生成箭头,一端宽，一端窄的多段线。\n参数:\n   startpt:箭头尖坐标\n   endpt:箭头尾坐标\n   width:箭头尾宽度\n返回值:\n  箭头图元名\n" "(entity:make-arrow startpt endpt width)" "1 startpt  : 未明确定义\n2 endpt  : 单个图元\n3 width  : 未明确定义\n" "" "")
("entity:make-polyline-ax" "根据点表生成polyline，三维多段线。参数:closed? T or nil.ActiveX 方法。" "(entity:make-polyline-ax pts-3d closed?)" "1 pts-3d  : 多个坐标点列表\n2 closed?  : 未明确定义\n" "三维POLYLINE图元" "")
("entity:line" "在模型空间画直线" "(entity:line start end)" "1 start  : 未明确定义\n2 end  : 单个图元\n" "" "")
("entity:make-rectangle" "创建矩形框(水平，竖直方向)" "(entity:make-rectangle pt1 pt2)" "1 pt1  : 单个2D/3D坐标点\n2 pt2  : 单个2D/3D坐标点\n" "" "")
("entity:dimaligned" "创建对齐标注" "(entity:dimaligned p1 p2 txtpt)" "1 p1  : 未明确定义\n2 p2  : 未明确定义\n3 txtpt  : 未明确定义\n" "" "")
("entity:reference->definition" "计算块参照与块定义的变换矩阵" "(entity:reference->definition ent)" "1 ent  : 单个图元\n" "返 回 值:3x3矩阵和向量组成的表" "示    例:(entity:Reference->Definition e)")
("entity:make-arc" "创建圆弧" "(entity:make-arc cen rad startpt endpt)" "1 cen  : 未明确定义\n2 rad  : 未明确定义\n3 startpt  : 未明确定义\n4 endpt  : 单个图元\n" "" "")
("entity:change-textstyle" "更改指定字体样式的字体\n参数:\nTextStyleName:字体样式名称\nFontName:字体名字\nBigFontName:大字体名字" "(entity:change-textstyle textstylename fontname bigfontname)" "1 textstylename  : 未明确定义\n2 fontname  : 未明确定义\n3 bigfontname  : 未明确定义\n" "无" "(entity:ChangeTextStyle \"STANDARD\" \"SIMfang.TTF\" \"\")\n(entity:Change-TextStyle \"STANDARD\" \"simplex.shx\" \"dayuxp.shx\")")
("entity:change-ltype" "改变对象线型\n参数:\nobj:对象\nstrLtype:线型" "(entity:change-ltype obj strltype)" "1 obj  : activeX 对象\n2 strltype  : 字符串\n" "成功返回T，失败返回nil" "(entity:change-Ltype cirobj \"DASHED\")")
("entity:group" "将实体集编组" "(entity:group lst name)" "1 lst  : 列表\n2 name  : 未明确定义\n" "" "")
("entity:putdxf" "更新图元的组码值\n参数:\nename:图元，选择集，图元列表\ncode:组码或组码表\nval:值或者值表" "(entity:putdxf ename code val)" "1 ename  : 单个图元\n2 code  : 未明确定义\n3 val  : 值\n" "更新后的图元，选择集，图元列表" "(entity:putdxf (car (entsel)) 10 '(0 0 0))")
("entity:block" "将选择集、图元表、对象表创建为块。" "(entity:block ss name insertionpoint)" "1 ss  : 选择集\n2 name  : 未明确定义\n3 insertionpoint  : 未明确定义\n" "" "")
("entity:gettable" "" "(entity:gettable s)" "1 s  : 未明确定义\n" "" "")
("entity:get-color" "获取图元的颜色，当颜色随层时，返回图层颜色。" "(entity:get-color ent)" "1 ent  : 单个图元\n" "" "")
("entity:deldxf" "删除图元的某一组码，用于操作颜色等不是必段的组码。\n参数:\nename:图元，选择集，图元列表\ncode:组码或组码表\n" "(entity:deldxf ename code)" "1 ename  : 单个图元\n2 code  : 未明确定义\n" "更新后的图元，选择集，图元列表" "(entity:deldxf (car (entsel)) 62 )")
("entity:make-lwpline-bold" "生成二维多段线.LWPOLYLINE\n参数:\n  plist:端点坐标点表，如：((x1 y1 z1) (x2 y2 z2) (x2 y2 z2))或((x1 y1) (x2 y2) (x2 y2))\n  convexity:各点与下一点的凸度(个数同坐标点表)，可为nil\n  elevation:标高\n  closed:是否闭合，1:闭合，0：不闭合" "(entity:make-lwpline-bold plist convexity elevation closed bold)" "1 plist  : 未明确定义\n2 convexity  : 未明确定义\n3 elevation  : 未明确定义\n4 closed  : 未明确定义\n5 bold  : 未明确定义\n" "返回值: 生成多段线的图元名" "")
("entity:make-lines" "按多个点坐标创建连续直线" "(entity:make-lines pts)" "1 pts  : 多个坐标点列表\n" "" "")
("entity:make-pline" "生成二维多段线.POLYLINE\n参数:\n  plist:端点坐标点表，如：((x1 y1 z1) (x2 y2 z2) (x2 y2 z2))或((x1 y1) (x2 y2) (x2 y2))\n  convexity:各点与下一点的凸度(个数同坐标点表)，可为nil\n  elevation:标高\n  closed:是否闭合，1:闭合，0：不闭合" "(entity:make-pline plist convexity elevation closed)" "1 plist  : 未明确定义\n2 convexity  : 未明确定义\n3 elevation  : 未明确定义\n4 closed  : 未明确定义\n" "返回值:  生成多段线的图元名" "示例:  (entity:make-pline '((0 0 0) (5000 0 0) (5000 5000 0) (0 5000 0)) '(-1.0 -0.5 0 -0.3) 100 1)")
("entity:make-circle" "创建一个圆\n参数:\ncen:圆心\nrad:半径\n示例:\n(entity:addcircle (getpoint) 3)\n" "(entity:make-circle cen rad)" "1 cen  : 未明确定义\n2 rad  : 未明确定义\n" "" "")
("entity:getbox" "图元的最小包围盒" "(entity:getbox ent offset)" "1 ent  : 单个图元\n2 offset  : 偏移量\n" "return:外框（偏移后）的左下，右上角点" "example:(entity:getbox (car(entsel)) 0.1)")
("entity:make-textstyle" "创建文字样式。" "(entity:make-textstyle name)" "1 name  : 未明确定义\n" "" "")
("entity:offset" "偏移对象" "(entity:offset obj dis)" "1 obj  : activeX 对象\n2 dis  : 未明确定义\n" "" "")
("entity:activedimstyle" "激活指定的标注样式。dimname:标注样式名" "(entity:activedimstyle dimname)" "1 dimname  : 未明确定义\n" "" "(activedimstyle \"40\")")
("entity:layers" "获取图层列表" "(entity:layers )" "None" "" "")
("entity:make-tag" "生成一个标签" "(entity:make-tag pt name)" "1 pt  : 单个2D/3D坐标点\n2 name  : 未明确定义\n" "" "")
("entity:make-line" "两点创建直线" "(entity:make-line startpt endpt)" "1 startpt  : 未明确定义\n2 endpt  : 单个图元\n" "" "")
("entity:make-point" "根据参数坐标绘制一个点" "(entity:make-point pt)" "1 pt  : 单个2D/3D坐标点\n" "" "")
("entity:ltype-exists" "线型是否存在?\n参数:\nstrLtype:线型名" "(entity:ltype-exists strltype)" "1 strltype  : 字符串\n" "成功返回t，失败返回nil" "(entity:Ltype-Exists \"continuous\")")
("entity:to-obj" "图元类型转为ActiveX对象。简化函数 e2o" "(entity:to-obj en0)" "1 en0  : 单个图元\n" "" "")
("entity:fontstyle_set" "验证字体样式是否存在，若不存在，则新建字体样式\n参数：\nst_name : 文字样式名\nh : 字高" "(entity:fontstyle_set st_name h)" "1 st_name  : 未明确定义\n2 h  : 未明确定义\n" "" "(fontstyle_set \"仿宋_GB2312\" 0)")
("entity:dimhorizontal" "生成水平标注" "(entity:dimhorizontal pt1 pt2 pt-txt)" "1 pt1  : 单个2D/3D坐标点\n2 pt2  : 单个2D/3D坐标点\n3 pt-txt  : 单个2D/3D坐标点\n" "return:标注图元名" "example:(entity:dimhorizontal (getpoint) (getpoint) (getpoint))")
("entity:listcollection" "列集合" "(entity:listcollection collection)" "1 collection  : 未明确定义\n" "" "")
("entity:gettextbox" "获取单行文本包围框" "(entity:gettextbox ent-text offset)" "1 ent-text  : 单个图元\n2 offset  : 偏移量\n" "return:文字外框（偏移后）的四个角点（左下，右下，右上，左上" "example:(entity:getTextBox (car(entsel)) 2)")
("entity:dimvertical" "创建竖向标注" "(entity:dimvertical p1 p2 txtpt)" "1 p1  : 未明确定义\n2 p2  : 未明确定义\n3 txtpt  : 未明确定义\n" "" "")
("entity:dimradius" "生成半径标注" "(entity:dimradius pt-cen pt-r)" "1 pt-cen  : 单个2D/3D坐标点\n2 pt-r  : 单个2D/3D坐标点\n" "return:标注图元名" "example:(entity:dimradius (getpoint) (getpoint))")
("entity:getdxf" "获取图元的组码值\n参数:\nent:图元名或vla对象名\ni:组码或组码表" "(entity:getdxf ent i)" "1 ent  : 单个图元\n2 i  : 未明确定义\n" "组码值或列表" "(entity:getdxf (car (entsel)) 10)")
("entity:addhatch" "创建填充。outArray:外边界对象表，inArray:内边界对象表，name:充填名称" "(entity:addhatch outarray inarray name)" "1 outarray  : 未明确定义\n2 inarray  : 未明确定义\n3 name  : 未明确定义\n" "填充体对象" "")
("entity:make-leader" "创建无标记的箭头标注" "(entity:make-leader startpt endpt)" "1 startpt  : 未明确定义\n2 endpt  : 单个图元\n" "" "")
("entity:add-entitys-to-block" "添加选择集到块定义。" "(entity:add-entitys-to-block block ss)" "1 block  : 未明确定义\n2 ss  : 选择集\n" "" "")
("entity:addtext" "生成一个TEXT实体,entity:make-text参数简化版" "(entity:addtext str pt zg ang dq)" "1 str  : 字符串\n2 pt  : 单个2D/3D坐标点\n3 zg  : 未明确定义\n4 ang  : 角度值\n5 dq  : 未明确定义\n" "return:文字图元名" "example:(entity:addtext \"文字\" (getpoint) 3 0 11)")
("entity:activelayer" "设置指定层为当前层.  name:图层名" "(entity:activelayer name)" "1 name  : 未明确定义\n" "成功返回t，失败返回nil" "(entity:ActiveLayer \"layer1\")")
("entity:make-text" "生成一个TEXT实体,单行文本,\n参数说明：\nfontsize: 字高\nang: 角度\nkgb: 宽高比\nqx: 倾斜角\ndqys: 对齐方式，L 左 M 中 R 右，T 上 M 中 B 下。\n" "(entity:make-text str pt1 fontsize ang kgb qx dqys)" "1 str  : 字符串\n2 pt1  : 单个2D/3D坐标点\n3 fontsize  : 未明确定义\n4 ang  : 角度值\n5 kgb  : 未明确定义\n6 qx  : 未明确定义\n7 dqys  : 未明确定义\n" "return:文字图元名" "example:(entity:make-text \"文字\" (getpoint) 3 0 0.8 0 \"LB\")")
("entity:textstyles" "文字样式集合" "(entity:textstyles )" "None" "" "")
("entity:onlockedlayer" "解锁图元所在的图层" "(entity:onlockedlayer ename)" "1 ename  : 单个图元\n" "" "")
("entity:make-polyline" "生成三维多段线.POLYLINE\n参数:\n  pts:端点坐标点表，如：((x1 y1 z1) (x2 y2 z2) (x2 y2 z2))\n  closed:是否闭合，1:闭合，0：不闭合" "(entity:make-polyline pts closed)" "1 pts  : 多个坐标点列表\n2 closed  : 未明确定义\n" "生成多段线的图元名" "(entity:make-pline '((0 0 0) (5000 0 0) (5000 5000 0) (0 5000 0)) 1)")
("entity:make-layer" "创建图层\n参数:\nstrName:图层名\nintColor:图层颜色\nstrLtype:图层线型\nbooleCur:是否置为当前图层" "(entity:make-layer strname intcolor strltype boolecur)" "1 strname  : 字符串\n2 intcolor  : 整数\n3 strltype  : 字符串\n4 boolecur  : 未明确定义\n" "成功返回图层名，失败返回nil" "(entity:make-layer \"Layer1\" 3 \"DASHED\" T)")
("entity:check-error-codes" "消除字体乱码，利用gbenor.shx gbcbig.shx\n参数:\ndoc:当前活动文档" "(entity:check-error-codes doc)" "1 doc  : 未明确定义\n" "无" "(entity:Check-Error-Codes *DOC*)")
("entity:spline" "" "(entity:spline pts)" "1 pts  : 多个坐标点列表\n" "" "")
("entity:dimdiameter" "生成直径标注" "(entity:dimdiameter pt1 pt2 pt-txt)" "1 pt1  : 单个2D/3D坐标点\n2 pt2  : 单个2D/3D坐标点\n3 pt-txt  : 单个2D/3D坐标点\n" "return:标注图元名" "example:(entity:dimdiameter (getpoint) (getpoint)(getpoint))")
("env:set-bg-color" "设置绘图区背景色" "(env:set-bg-color col)" "1 col  : 未明确定义\n" "无" "(env:set-bg-color 55)")
("env:set-cross-color" "" "(env:set-cross-color )" "None" "" "")
("excel:set-rangevalue" "设置单元格或区域的值\n参数:XLApp:已打开的excel文件对象\n参数:index:位置信息，如\"A1\"或者'(1 1), \"A1:B2\"或者'(1 1 2 2)\n参数:value:要设置的值列表或者字符串/数字等" "(excel:set-rangevalue xlapp index value)" "1 xlapp  : 未明确定义\n2 index  : 索引值\n3 value  : 值\n" "" "")
("excel:saveas" "另存为excel文件\n参数:XLApp:已打开的excel文件对象\n参数:Filename:另存为的文件路径" "(excel:saveas xlapp filename)" "1 xlapp  : 未明确定义\n2 filename  : 未明确定义\n" "" "")
("excel:add-sheet" "添加个工作表\n参数:XLApp:已打开的excel文件对象\n参数:Name:工作表名" "(excel:add-sheet xlapp name)" "1 xlapp  : 未明确定义\n2 name  : 未明确定义\n" "成功返回t" "(excel:add-sheet exobj \"123\")")
("excel:get-rangeindex" "获取range的索引\n参数:range:range对象" "(excel:get-rangeindex range)" "1 range  : 未明确定义\n" "A1格式的索引" "(excel:get-RangeIndex xlrange)")
("excel:quit-all" "退出所有打开的excel文件\n参数:SaveYN:是否保存" "(excel:quit-all saveyn)" "1 saveyn  : 未明确定义\n" "" "")
("excel:set-backcolor" "设置充填色\n参数:xlapp:已打开的excel文件对象\n参数:index:区域索引，A1引用格式或者行列表\n参数:colorindex:颜色索引0-56号" "(excel:set-backcolor xlapp index colorindex)" "1 xlapp  : 未明确定义\n2 index  : 索引值\n3 colorindex  : 未明确定义\n" "" "")
("excel:aci->truecolor" "将cad颜色索引转换为真彩色值\n参数:aci:cad颜色索引" "(excel:aci->truecolor aci)" "1 aci  : 未明确定义\n" "真彩色值" "(excel:ACI->Truecolor)")
("excel:save" "保存当前工作簿\n参数:xlsApp:当前工作簿对象" "(excel:save xlsapp)" "1 xlsapp  : 未明确定义\n" "正确保存应该返回t，错误返回nil" "(excel:save xlsobj)")
("excel:set-activesheet" "设置活动工作表\n参数:XLApp:已打开的excel文件对象\n参数:Name:工作表名" "(excel:set-activesheet xlapp name)" "1 xlapp  : 未明确定义\n2 name  : 未明确定义\n" "成功返回t" "(excel:set-ActiveSheet exobj \"123\")")
("excel:eci->aci" "将excel颜色索引转换为cad颜色索引\n参数:Color:excel颜色索引" "(excel:eci->aci color)" "1 color  : 未明确定义\n" "cad颜色索引" "(Excel:ECI->ACI 6)")
("excel:aci->eci" "将cad颜色索引转换为excel颜色索引\n参数:Color:cad颜色索引" "(excel:aci->eci color)" "1 color  : 未明确定义\n" "excel颜色索引" "(excel:ACI->ECI 2)")
("excel:get-usedrange" "获取已使用的range区域\n参数:XLApp:已打开的excel文件对象\n参数:Name:工作表名" "(excel:get-usedrange xlapp name)" "1 xlapp  : 未明确定义\n2 name  : 未明确定义\n" "成功返回range对象" "(excel:get-UsedRange exobj \"345\")")
("excel:unmerge-range" "分解合并单元格\n参数:xlapp:已打开的excel文件对象\n参数:index:区域索引，A1引用格式或者行列表" "(excel:unmerge-range xlapp index)" "1 xlapp  : 未明确定义\n2 index  : 索引值\n" "分解后的range对象" "(excel:UnmergeRange exobj \"A1\")")
("excel:new" "新建Excel工作簿\n参数:ishide:是否可见，t为可见，nil为不可见" "(excel:new ishide)" "1 ishide  : 未明确定义\n" "一个表示Excel工作簿的vla对象" "(excel:New t)")
("excel:eci->truecolor" "将excel颜色索引转换为真彩色值\n参数:Color:excel颜色索引" "(excel:eci->truecolor color)" "1 color  : 未明确定义\n" "真彩色值" "(excel:ECI->Truecolor 6)")
("excel:get-range" "说明:根据索引获取range对象\n参数:xlapp:已打开的excel文件对象\n参数:index:区域索引，A1引用格式或者行列表" "(excel:get-range xlapp index)" "1 xlapp  : 未明确定义\n2 index  : 索引值\n" "range对象" "(excel:get-Range exobj \"A1\")")
("excel:get-property" "检索 VLA 对象的特性\n参数:obj:vla对象\n参数:prop:符号或字符串，标识要检索的特性，字符串的时候可以直接调用多级特性：\"Rows.Count\"" "(excel:get-property obj prop)" "1 obj  : activeX 对象\n2 prop  : 未明确定义\n" "特性的值" "(excel:get-property range \"MergeArea.Rows.Count\")")
("excel:delete-sheet" "说明:删除工作表\n参数:XLApp:已打开的excel文件对象\n参数:Name:工作表名" "(excel:delete-sheet xlapp name)" "1 xlapp  : 未明确定义\n2 name  : 未明确定义\n" "成功返回t" "(excel:deleteSheet exobj \"123\")")
("excel:get-backcolor" "获取充填色\n参数:xlapp:已打开的excel文件对象\n参数:index:区域索引，A1引用格式或者行列表" "(excel:get-backcolor xlapp index)" "1 xlapp  : 未明确定义\n2 index  : 索引值\n" "颜色索引字符串 0-56 号" "(excel:get-Backcolor exobj \"A1\")")
("excel:utils-index-range->cells" "工具函数，将A1格式的引用转换成行号、列标表\n参数:var:A1格式的字符串" "(excel:utils-index-range->cells var)" "1 var  : 未明确定义\n" "行号、列标表" "(excel:Utils-index-range->cells \"DD23:EE44\")")
("excel:utils-getvalue" "说明:工具函数，获取变体的值\n参数:var:变体" "(excel:utils-getvalue var)" "1 var  : 未明确定义\n" "值列表，其中数字全部转换为字符串" "(excel:Utils-GetValue obj)")
("excel:range-mergep" "判断是否是合并单元格\n参数:xlapp:已打开的excel文件对象\n参数:index:区域索引，A1引用格式或者行列表" "(excel:range-mergep xlapp index)" "1 xlapp  : 未明确定义\n2 index  : 索引值\n" "是，返回t，否，返回nil" "(excel:Range-Mergep exobj \"A1\")")
("excel:get-activesheet" "获取当前工作表的名字\n参数:XLApp:打开的excel文件对象" "(excel:get-activesheet xlapp)" "1 xlapp  : 未明确定义\n" "名字字符串" "(excel:getActiveSheet exobj)")
("excel:get-selection" "获取选择区域的索引\n参数:xlapp:已打开的excel文件对象" "(excel:get-selection xlapp)" "1 xlapp  : 未明确定义\n" "A1格式的索引" "(excel:get-Selection exobj)")
("excel:sheets" "获取工作表列表\n参数:XLApp:已打开的excel文件对象" "(excel:sheets xlapp)" "1 xlapp  : 未明确定义\n" "工作表名列表" "(excel:sheets exobj)")
("excel:rename-sheet" "说明:重命名工作表\n参数:XLApp:已打开的excel文件对象\n参数:Old:工作表原名\n参数:New:工作表新名" "(excel:rename-sheet xlapp old new)" "1 xlapp  : 未明确定义\n2 old  : 未明确定义\n3 new  : 未明确定义\n" "成功返回t" "(excel:rename-Sheet  exobj \"123\" \"345\")")
("excel:open" "打开一个excel文件\n参数:Filename:文件路径\n参数:ishide:是否可见，t为可见，nil为不可见" "(excel:open filename ishide)" "1 filename  : 未明确定义\n2 ishide  : 未明确定义\n" "一个表示打开的excel文件的vla对象" "(excel:open \"C:\\Users\\mimi\\Desktop\\1.xlsx\" t)")
("excel:utils-index-offset" "根据行列偏移量计算单元格索引\n参数:BaseCellId:基础单元格索引，可以为A1引用格式或者行列数字列表\n参数:rowOffset:行偏移量\n参数:columnOffset:列偏移量" "(excel:utils-index-offset basecellid rowoffset columnoffset)" "1 basecellid  : 未明确定义\n2 rowoffset  : 未明确定义\n3 columnoffset  : 未明确定义\n" "A1格式的单元格索引" "(excel:Utils-index-offset \"A1\" 2 3)")
("excel:merge-range" "合并单元格\n参数:xlapp:已打开的excel文件对象\n参数:index:区域索引，A1引用格式或者行列表" "(excel:merge-range xlapp index)" "1 xlapp  : 未明确定义\n2 index  : 索引值\n" "" "")
("excel:utils-index-cells->range" "说明:工具函数，将行号、列标表转换成A1格式的引用\n参数:lst:行号、列标表，列最多支持到ZZ列" "(excel:utils-index-cells->range lst)" "1 lst  : 列表\n" "A1格式的引用" "(Excel:Utils-index-cells->range '(1 2 3 4))")
("excel:quit" "退出excel\n参数:ExlObj:打开的excel对象\n参数:SaveYN:是否保存，t为保存，nil为不保存" "(excel:quit exlobj saveyn)" "1 exlobj  : 未明确定义\n2 saveyn  : 未明确定义\n" "" "")
("excel:get-mergeindex" "获取合并单元格的索引\n参数:xlapp:已打开的excel文件对象\n参数:index:区域索引，A1引用格式或者行列表" "(excel:get-mergeindex xlapp index)" "1 xlapp  : 未明确定义\n2 index  : 索引值\n" "A1格式的索引" "(Excel:get-MergeIndex)")
("excel:get-rangevalue" "获取单元格或区域的值\n参数:XLApp:已打开的excel文件对象\n参数:index:位置信息，如\"A1\"或者'(1 1), \"A1:B2\"或者'(1 1 2 2)" "(excel:get-rangevalue xlapp index)" "1 xlapp  : 未明确定义\n2 index  : 索引值\n" "值的列表" "(excel:get-RangeValue exobj \"A1:B2\")")
("file:list-to-stream" "" "(file:list-to-stream out_file intlist)" "1 out_file  : 未明确定义\n2 intlist  : 整数\n" "" "")
("file:subst-all" "替换文件中的字符串。" "(file:subst-all newstr oldstr lspfile new-suffix)" "1 newstr  : 未明确定义\n2 oldstr  : 未明确定义\n3 lspfile  : 未明确定义\n4 new-suffix  : 未明确定义\n" "" "")
("file:merge" "合并多个文件内容到 dist 文件中。" "(file:merge dist lst-files)" "1 dist  : 未明确定义\n2 lst-files  : 列表\n" "" "")
("group:make" "将实体集编组,lst 图元列表，name 编组名,(匿名组首字为*)." "(group:make lst name)" "1 lst  : 列表\n2 name  : 未明确定义\n" "" "")
("group:to-objlist" "编组转图元对象列表, obj-g 为编组对象。" "(group:to-objlist obj-g)" "1 obj-g  : activeX 对象\n" "" "")
("group:list" "列出图中的编组名" "(group:list )" "None" "" "")
("group:get-by-name" "获取编组名为 name 的编组对象。" "(group:get-by-name name)" "1 name  : 未明确定义\n" "" "")
("group:groups-to-objlist" "将编组集转为编组对象列表." "(group:groups-to-objlist )" "None" "" "")
("group:to-entlist" "编组转图元列表, obj-g 为编组对象。" "(group:to-entlist obj-g)" "1 obj-g  : activeX 对象\n" "" "")
("layer:layerofflist" "返回关闭图层列表" "(layer:layerofflist )" "None" "" "")
("layer:on" "图层列表开关函数" "(layer:on laylist bool-flag)" "1 laylist  : 未明确定义\n2 bool-flag  : 未明确定义\n" "" "")
("layer:make" "创建一个图层\n参数1:name:图层名称\n参数2:colour:颜色默认nil(7)\n参数3:linetype:线型默认nil(Continuous)\n参数4:n70:标志位，默认nil(0)\n  标准标记（按位编码值）：\n  1 = 冻结图层，否则解冻图层\n  2 = 默认情况下在新视口中冻结图层\n  4 = 锁定图层\n  16 = 如果设置了此位，则表条目外部依赖于外部参照\n  32 = 如果同时设置了此位和位 16，则表明已成功融入了外部依赖的外部参照\n  64 = 如果设置了此位，则表明在上次编辑图形时，图形中至少有一个图元参照了表条目。\n  (此标志适用于 AutoCAD 命令。大多数读取 DXF 文件的程序都可以忽略它，并且无需由写入 DXF 文件的程序对其进行设置)" "(layer:make name colour linetype flag)" "1 name  : 未明确定义\n2 colour  : 未明确定义\n3 linetype  : 未明确定义\n4 flag  : 未明确定义\n" "" "")
("layer:off" "关闭图层\n参数：图层名称表" "(layer:off laylist)" "1 laylist  : 未明确定义\n" "" "")
("layer:info" "返回所有图层的信息" "(layer:info )" "None" "((\"层名\" 状态 颜色 \"线型\")……)\n状态：1冻结图层 2新视口冻结图层 4锁定…(其他看帮助)\n颜色：负值为隐藏图层\n" "")
("layer:lockedlist" "返回锁定图层列表" "(layer:lockedlist )" "None" "" "")
("layer:freezelist" "返回冻结图层列表" "(layer:freezelist )" "None" "" "")
("layer:freezed-p" "层是否冻结？" "(layer:freezed-p lname)" "1 lname  : 未明确定义\n" "" "")
("layer:plotable" "设置指定图层(列表)不打印\n参数1、图层列表\n参数2、是否打印(T打印/nil不打印)" "(layer:plotable laylist on-off)" "1 laylist  : 未明确定义\n2 on-off  : 未明确定义\n" "" "")
("layer:allname" "返回所有图层的名称(字符串表)" "(layer:allname )" "None" "" "")
("layer:lock" "图层锁定开关函数" "(layer:lock laylist bool-flag)" "1 laylist  : 未明确定义\n2 bool-flag  : 未明确定义\n" "" "")
("layer:plottablelist" "返回可打印图层列表" "(layer:plottablelist )" "None" "" "")
("layer:plottable" "图层打印开关函数" "(layer:plottable laylist bool-flag)" "1 laylist  : 未明确定义\n2 bool-flag  : 未明确定义\n" "" "")
("layer:ent" "获获取指定图层的图元名" "(layer:ent name)" "1 name  : 未明确定义\n" "图元" "(layer:ent \"0\") --> <图元名: -64cb388>")
("layer:obj-name" "返回所有图层对应的对象名(大写)" "(layer:obj-name )" "None" "((图层名1 对象名1) (图层名2 对象名2)……)" "")
("layer:freeze" "图层列表冻结开关函数" "(layer:freeze laylist bool-flag)" "1 laylist  : 未明确定义\n2 bool-flag  : 未明确定义\n" "" "")
("layer:activelayer" "设置指定层为当前层" "(layer:activelayer name)" "1 name  : 未明确定义\n" "成功返回t，失败返回nil" "(entity:ActiveLayer \"layer1\")")
("layer:locked-p" "层是否锁定？" "(layer:locked-p lname)" "1 lname  : 未明确定义\n" "" "")
("layer:list" "返回图层列表 list" "(layer:list )" "None" "" "")
("layout:list" "按照当前屏幕显示的顺序返回所有布局名称" "(layout:list )" "None" "布局名列表" "")
("layout:sort" "自动按布局名排序布局" "(layout:sort )" "None" "" "")
("layout:set-position" "根据指定布局名称修改布局的位置" "(layout:set-position name n)" "1 name  : 未明确定义\n2 n  : 未明确定义\n" "" "")
("layout:make-viewport" "从模型空间生成布局" "(layout:make-viewport layout pt-center width height pt-model pt2)" "1 layout  : 未明确定义\n2 pt-center  : 单个2D/3D坐标点\n3 width  : 未明确定义\n4 height  : 未明确定义\n5 pt-model  : 单个2D/3D坐标点\n6 pt2  : 单个2D/3D坐标点\n" "" "")
("layout:vla-list" "按照当前屏幕显示的顺序返回所有布局对象" "(layout:vla-list )" "None" "布局对象列表" "")
("line:get-lwpoints" "生成多段线的点序" "(line:get-lwpoints en0)" "1 en0  : 单个图元\n" "" "")
("line:length" "求线段实体长度" "(line:length ent-line)" "1 ent-line  : 单个图元\n" "" "")
("line:mid" "求线段实体中点坐标" "(line:mid ent-line)" "1 ent-line  : 单个图元\n" "" "")
("list:dot->list" "点表转普通表" "(list:dot->list lst)" "1 lst  : 列表\n" "普通表" "(list:dot->list '(1 2 3 . 4))")
("list:assoclist-appendlist" "" "(list:assoclist-appendlist lst value)" "1 lst  : 列表\n2 value  : 值\n" "" "")
("list:assoclist-values" "返回关联表的value值表" "(list:assoclist-values lst)" "1 lst  : 列表\n" "" "")
("list:get-ubound" "得到表的各维数长度，最多支持到三维" "(list:get-ubound lst)" "1 lst  : 列表\n" "" "")
("list:range" "生成等差数列表，类似python的range()函数.\n参数：start:起始值\n      end:结束值\n      step:等差值" "(list:range start end step)" "1 start  : 未明确定义\n2 end  : 单个图元\n3 step  : 未明确定义\n" "等差数列表" "(list:range 1 4 1) --> (1 2 3)")
("list:indot->list" "内嵌点表的表转普通表" "(list:indot->list lst)" "1 lst  : 列表\n" "" "")
("list:replace-index" "按索引替换列表" "(list:replace-index oldlst index item)" "1 oldlst  : 未明确定义\n2 index  : 索引值\n3 item  : 项或项值\n" "替换后的列表" "(list:reeplace-index '(0 1 2 3) 1 5)")
("list:change-index" "交换列表的m和n项，索引从0开始" "(list:change-index lst m n)" "1 lst  : 列表\n2 m  : 未明确定义\n3 n  : 未明确定义\n" "" "")
("list:assoclist-remove" "删除表中关联表匹配到key的的子表" "(list:assoclist-remove lst key)" "1 lst  : 列表\n2 key  : 键，关键字\n" "删除元素后的表" "(list:AssocList-Remove '((1 11) (2 22) (3 33) (4 44)) 2) ==>((1 11) (3 33) (4 44))")
("list:-" "两个列表各项差组成的列表，列表长度以参数中列表长度小的为准" "(list:- lst1 lst2)" "1 lst1  : 列表\n2 lst2  : 列表\n" "" "")
("list:+" "两个列表各项相加之和组成的列表，列表长度以参数中列表长度小的为准.\n参数:lst1,lst2:数字列表" "(list:+ lst1 lst2)" "1 lst1  : 列表\n2 lst2  : 列表\n" "列表各项相加后的列表" "(list:+ '(1 2) '(3 4))")
("list:set-nth" "更新lst表的第n个元素为value" "(list:set-nth value n lst)" "1 value  : 值\n2 n  : 未明确定义\n3 lst  : 列表\n" "" "")
("list:remove-front-nth" "删除列表中表的前n个元素" "(list:remove-front-nth n lst)" "1 n  : 未明确定义\n2 lst  : 列表\n" "" "")
("list:assoclist-additem" "添加关联表的元素,无替换" "(list:assoclist-additem lst value)" "1 lst  : 列表\n2 value  : 值\n" "关联表，无相同的key" "(list:AssocList-AddItem '((1 11) (2 22) (3 33) (4 44)) '(2 33))")
("list:subst" "置换表中指定位置的元素" "(list:subst n a l)" "1 n  : 未明确定义\n2 a  : 未明确定义\n3 l  : 未明确定义\n" "" "")
("list:remove-index" "按索引删除列表的项,leemac" "(list:remove-index lst index)" "1 lst  : 列表\n2 index  : 索引值\n" "删除索引项之后的列表" "(list:RemoveIndex '(0 1 2 3) 1)")
("list:remove-once" "删除表中第一个匹配到的元素" "(list:remove-once lst item)" "1 lst  : 列表\n2 item  : 项或项值\n" "删除元素后的表" "(list:RemoveOnce '(1 2 3 4 3) 3)")
("list:item-num" "表中元素及数量" "(list:item-num lst)" "1 lst  : 列表\n" "" "")
("list:remove-duplicates" "删除列表中重复的原子。" "(list:remove-duplicates lst)" "1 lst  : 列表\n" "" "")
("list:split" "列表切分,不足部分省略，此函数返回结果相对list:split-2d、list:split-3d两个特殊函数比较合理" "(list:split lst x)" "1 lst  : 列表\n2 x  : 未明确定义\n" "" "")
("list:insert-nth" "插入元素va到lst表的第n位" "(list:insert-nth value n lst)" "1 value  : 值\n2 n  : 未明确定义\n3 lst  : 列表\n" "" "")
("list:assoclist-appenditem" "添加关联表的元素,替换. 同 assoc" "(list:assoclist-appenditem lst value)" "1 lst  : 列表\n2 value  : 值\n" "" "")
("list:assoclist-keys" "返回关联表的key值表" "(list:assoclist-keys lst)" "1 lst  : 列表\n" "" "")
("list:delsame" "删除表中相同元素，保留第一次出现的位置" "(list:delsame lst buzz)" "1 lst  : 列表\n2 buzz  : 容差\n" "" "")
("list:trim" "删除表头前m项，表尾前n项" "(list:trim lst m n)" "1 lst  : 列表\n2 m  : 未明确定义\n3 n  : 未明确定义\n" "" "")
("list:search-index" "以索引查找表中元素\n参数：\n  lst:列表\n  index:索引或者索引表" "(list:search-index lst index)" "1 lst  : 列表\n2 index  : 索引值\n" "查找到的元素组成的表" "(list:Search-Index '(1 2 3 4) 3)")
("list:ltrim" "删除表头前m项" "(list:ltrim lst m)" "1 lst  : 列表\n2 m  : 未明确定义\n" "" "")
("list" "" "(list )" "None" "" "")
("list:split-2d" "列表按顺序切分为2元素表组成的表,不足部分用nil表示" "(list:split-2d lst)" "1 lst  : 列表\n" "" "")
("list:split-3d" "列表按顺序切分为3元素表组成的表,不足部分用nil表示" "(list:split-3d lst)" "1 lst  : 列表\n" "((x x x )(x x x)...)" "(list:split-3d '(1 2 3 4))")
("list:same" "查找表中重复元素" "(list:same lst)" "1 lst  : 列表\n" "" "")
("list:split-index" "根据索引分割列表，索引从0开始" "(list:split-index lst index)" "1 lst  : 列表\n2 index  : 索引值\n" "索引前后元素组成的表，其中索引所指向的元素位于第二个子表的表头" "(list:split-index '(1 2 3 4) 2)")
("list:rm-m2n" "删除列表的第m至n项，索引值从0计算" "(list:rm-m2n lst m n)" "1 lst  : 列表\n2 m  : 未明确定义\n3 n  : 未明确定义\n" "" "")
("list:assoclist-index" "根据key查找关联表的索引" "(list:assoclist-index lst key)" "1 lst  : 列表\n2 key  : 键，关键字\n" "索引，从0开始" "(list:AssocList-Index '((1 11) (2 22) (3 33) (4 44)) 3) ==> 2")
("list:delnotsame" "查找表中不重复元素。" "(list:delnotsame lst)" "1 lst  : 列表\n" "" "")
("list:same-num" "表中相同元素及数量" "(list:same-num lst)" "1 lst  : 列表\n" "" "")
("list:assoclist-key" "返回关联表中key对应的value,等价于(cdr (assoc key value))" "(list:assoclist-key lst key)" "1 lst  : 列表\n2 key  : 键，关键字\n" "key对应的value" "(list:AssocList-Key lst key)")
("list:get-front-nth" "返回前 n 个元素" "(list:get-front-nth n lst)" "1 n  : 未明确定义\n2 lst  : 列表\n" "" "")
("list:delsame-all" "删除表中所有重复的元素" "(list:delsame-all lst)" "1 lst  : 列表\n" "" "")
("list:replace[m,n]" "按索引替换列表第m子表的第n项" "(list:replace[m,n] oldlst m n item)" "1 oldlst  : 未明确定义\n2 m  : 未明确定义\n3 n  : 未明确定义\n4 item  : 项或项值\n" "" "")
("list:rtrim" "删除表尾m项" "(list:rtrim lst m)" "1 lst  : 列表\n2 m  : 未明确定义\n" "" "")
("list:insert" "在列表lst 的第 index 项前插入项 item。" "(list:insert lst index item)" "1 lst  : 列表\n2 index  : 索引值\n3 item  : 项或项值\n" "插入项后的列表" "(list:insert '(0 1 2 3) 1 5)")
("list:sublist" "获取子列表,leemac" "(list:sublist lst idx len)" "1 lst  : 列表\n2 idx  : 未明确定义\n3 len  : 未明确定义\n" "子列表" "")
("list:move" "列表循环移动" "(list:move lst n)" "1 lst  : 列表\n2 n  : 未明确定义\n" "" "")
("list:remove-nth" "删除lst表的第n个元素" "(list:remove-nth n lst)" "1 n  : 未明确定义\n2 lst  : 列表\n" "" "")
("list:search-item" "查找表中元素的索引，索引从0开始" "(list:search-item lst item)" "1 lst  : 列表\n2 item  : 项或项值\n" "索引值表" "(list:search-item '(1 2 3 4) 3)")
("list:exist" "判断item是否在列表内" "(list:exist lst item)" "1 lst  : 列表\n2 item  : 项或项值\n" "存在t，反之nil" "(list:exist '(1 2 3 4) 3)")
("m:arcosh" "计算反双曲余弦值" "(m:arcosh x)" "1 x  : 未明确定义\n" "" "")
("m:cosh" "计算双曲余弦值" "(m:cosh x)" "1 x  : 未明确定义\n" "" "")
("m:mid" "计算中点" "(m:mid x y)" "1 x  : 未明确定义\n2 y  : 未明确定义\n" "" "")
("m:base->dec" "进制转换" "(m:base->dec n b)" "1 n  : 未明确定义\n2 b  : 未明确定义\n" "" "")
("m:arsinh" "计算反双曲正弦值" "(m:arsinh x)" "1 x  : 未明确定义\n" "" "")
("m:fast-prime?" "基于费马检查的素数检测" "(m:fast-prime? n times)" "1 n  : 未明确定义\n2 times  : 未明确定义\n" "" "")
("m:fix-angle" "使弧度值在 0-2pi 之间。" "(m:fix-angle angle0)" "1 angle0  : 角度值\n" "" "")
("m:expmod" "" "(m:expmod base exp1 m)" "1 base  : 未明确定义\n2 exp1  : 未明确定义\n3 m  : 未明确定义\n" "" "")
("m:randrange" "计算给定范围内的随机数" "(m:randrange a b)" "1 a  : 未明确定义\n2 b  : 未明确定义\n" "" "")
("m:trim" "数值后续零清除" "(m:trim realnum)" "1 realnum  : 实数\n" "" "")
("m:random-fix" "" "(m:random-fix n m)" "1 n  : 未明确定义\n2 m  : 未明确定义\n" "" "")
("m:symmetric-difference" "列表对称差集" "(m:symmetric-difference l1 l2)" "1 l1  : 未明确定义\n2 l2  : 未明确定义\n" "" "")
("m:union" "求列表的并集" "(m:union lst1 lst2)" "1 lst1  : 列表\n2 lst2  : 列表\n" "" "")
("m:length" "两点长度(距离)，等同于两点向量的模" "(m:length start end)" "1 start  : 未明确定义\n2 end  : 单个图元\n" "" "")
("m:minlist" "返回数值列表的中的最小值" "(m:minlist lst)" "1 lst  : 列表\n" "" "")
("m:power" "增强power函数，目的为扩展expt函数,参数都为数字时，字符串，数字，列表类型，其他类型返回nil,返回expt计算的结果，base为字符串和列表时，返回自乘的结果" "(m:power base pow)" "1 base  : 未明确定义\n2 pow  : 未明确定义\n" "" "")
("m:calheight" "目标点的高程" "(m:calheight pt1 pt2 podu)" "1 pt1  : 单个2D/3D坐标点\n2 pt2  : 单个2D/3D坐标点\n3 podu  : 未明确定义\n" "" "")
("m:mulmod" "快速积求模" "(m:mulmod a b m)" "1 a  : 未明确定义\n2 b  : 未明确定义\n3 m  : 未明确定义\n" "" "")
("m:dms" "根据给定十进制角度返回度分秒格式的表" "(m:dms degress)" "1 degress  : 未明确定义\n" "" "")
("m:dmm" "根据给定弧度返回度分秒格式的表" "(m:dmm ang)" "1 ang  : 角度值\n" "" "")
("m:even?" "" "(m:even? x)" "1 x  : 未明确定义\n" "" "")
("m:tan" "计算正切值" "(m:tan x)" "1 x  : 未明确定义\n" "" "")
("m:transpt" "根据已知世界坐标和用户坐标的基准点，计算世界坐标对应的用户坐标" "(m:transpt base usrpt transpt ang)" "1 base  : 未明确定义\n2 usrpt  : 未明确定义\n3 transpt  : 未明确定义\n4 ang  : 角度值\n" "" "")
("m:asin" "计算反正弦值" "(m:asin x)" "1 x  : 未明确定义\n" "" "")
("m:fast-expt" "" "(m:fast-expt b n)" "1 b  : 未明确定义\n2 n  : 未明确定义\n" "" "")
("m:coord-chg" "" "(m:coord-chg pt-wcs o-ucs o-ang)" "1 pt-wcs  : 单个2D/3D坐标点\n2 o-ucs  : 未明确定义\n3 o-ang  : 未明确定义\n" "" "")
("m:acos" "计算反余弦值" "(m:acos x)" "1 x  : 未明确定义\n" "" "")
("m:degress->radions" "角度转弧度函数" "(m:degress->radions degress)" "1 degress  : 未明确定义\n" "" "")
("m:tanh" "计算双曲正切值" "(m:tanh x)" "1 x  : 未明确定义\n" "" "")
("m:rand-by-cputicks" "" "(m:rand-by-cputicks )" "None" "" "")
("m:sinh" "计算双曲正弦值" "(m:sinh x)" "1 x  : 未明确定义\n" "" "")
("m:factorial" "求n 的阶乘。斯特林公式法。\n" "(m:factorial n)" "1 n  : 未明确定义\n" "" "")
("m:base->base" "进制转换" "(m:base->base n b1 b2)" "1 n  : 未明确定义\n2 b1  : 未明确定义\n3 b2  : 未明确定义\n" "" "")
("m:square" "" "(m:square x)" "1 x  : 未明确定义\n" "" "")
("m:azimuth" "计算某个角度(以x轴正向，逆时针)的方位角(以Y轴正向，顺时针)" "(m:azimuth ang)" "1 ang  : 角度值\n" "" "")
("m:gcd" "" "(m:gcd a b)" "1 a  : 未明确定义\n2 b  : 未明确定义\n" "" "")
("m:coordinate-scale" "坐标缩放" "(m:coordinate-scale point scale)" "1 point  : 未明确定义\n2 scale  : 比例值\n" "" "")
("m:maxlist" "返回数值列表的中的最大值" "(m:maxlist lst)" "1 lst  : 列表\n" "" "")
("m:radions->degress" "弧度转角度函数" "(m:radions->degress radions)" "1 radions  : 未明确定义\n" "" "")
("m:rand" "生成伪随机数" "(m:rand )" "None" "" "")
("m:dec->base" "进制转换" "(m:dec->base n b)" "1 n  : 未明确定义\n2 b  : 未明确定义\n" "" "")
("m:cal" "根据给定表达式计算结果" "(m:cal lst1 lst2 str)" "1 lst1  : 列表\n2 lst2  : 列表\n3 str  : 字符串\n" "" "")
("m:fermat-test" "" "(m:fermat-test n)" "1 n  : 未明确定义\n" "" "")
("m:intersect" "列表交集" "(m:intersect lst1 lst2)" "1 lst1  : 列表\n2 lst2  : 列表\n" "" "")
("m:sort-by-curve" "函数说明:沿曲线排序~%返 回 值:排序后的点表" "(m:sort-by-curve curve lst)" "1 curve  : 曲线\n2 lst  : 列表\n" "" "")
("m:rtos" "保留小数位数(四舍五入)" "(m:rtos real prec)" "1 real  : 实数\n2 prec  : 未明确定义\n" "四舍五入后的字符串" "(m:rtos 1.8000 3)")
("m:difference" "列表差集" "(m:difference lst1 lst2)" "1 lst1  : 列表\n2 lst2  : 列表\n" "" "")
("m:coordinate" "坐标向量变换" "(m:coordinate p-base point2d)" "1 p-base  : 未明确定义\n2 point2d  : 未明确定义\n" "" "")
("m:coordinate-rotate" "坐标旋转" "(m:coordinate-rotate point2d angle1)" "1 point2d  : 未明确定义\n2 angle1  : 角度值\n" "" "")
("m:random" "生成伪随机数" "(m:random n)" "1 n  : 未明确定义\n" "" "")
("m:prime?" "基于Miller-Rabin检查的素数检测" "(m:prime? n times)" "1 n  : 未明确定义\n2 times  : 未明确定义\n" "" "")
("m:artanh" "计算反双曲正切值" "(m:artanh x)" "1 x  : 未明确定义\n" "" "")
("matrix:mxm" "矩阵相乘" "(matrix:mxm m q)" "1 m  : 未明确定义\n2 q  : 未明确定义\n" "" "")
("matrix:mxv" "向量的矩阵变换(向量乘矩阵) " "(matrix:mxv m v)" "1 m  : 未明确定义\n2 v  : 未明确定义\n" "" "")
("matrix:mxp" "点到矩阵的变换" "(matrix:mxp m p)" "1 m  : 未明确定义\n2 p  : 未明确定义\n" "" "")
("matrix:trp" "矩阵转置" "(matrix:trp m)" "1 m  : 未明确定义\n" "" "")
("matrix:norm" "向量的模(长度)" "(matrix:norm v)" "1 v  : 未明确定义\n" "" "")
("matrix:unit" "单位向量" "(matrix:unit v)" "1 v  : 未明确定义\n" "" "")
("matrix:v^v" "两向量的叉积" "(matrix:v^v u v)" "1 u  : 未明确定义\n2 v  : 未明确定义\n" "" "")
("matrix:vxv" "向量的点积" "(matrix:vxv v1 v2)" "1 v1  : 未明确定义\n2 v2  : 未明确定义\n" "" "")
("matrix:vxs" "向量乘标量(系数)" "(matrix:vxs v s)" "1 v  : 未明确定义\n2 s  : 未明确定义\n" "" "")
("p:vlap" "判断是否vla对象." "(vlap obj)" "1 obj : 对象" "" "")
("p:stringp" "判断是否字符串" "(stringp arg)"  "1 arg : 参数" "" "")
("p:realp" "判断是否实数" "(realp arg)"  "1 arg : 参数" "" "")
("p:enamep" "判断是否图元" "(enamep arg)"  "1 arg : 参数" "" "")
("p:variantp" "判断是否变体" "(enamep arg)"  "1 arg : 参数" "" "")
("p:picksetp" "判断是否非空选择集" "(picksetp ss)"   "1 ss : 选择集" "" "")
("p:intp"  "判断是否整数"  "(intp x)"   "1 x : 参数" "" "")
("p:safearrayp" "判断是否为安全数组" "(safearrayp x)"    "1 x : 参数" "" "")
("p:ename-listp"  "判断是否为图元名列表" "(ename-listp lst)"    "1 lst : 列表参数" "" "")
("p:vla-listp"  "判断是否为vla对象列表" "(vla-listp lst)"    "1 lst : 列表参数" "" "")
("p:string-listp" "判断是否为字符串列表" "(string-listp lst)"    "1 lst : 列表参数" "" "")
("p:DotPairp"  "是否为点对表" "(dotepairp lst)"    "1 lst : 列表参数" "" "")
("p:curvep" "是否是曲线" "(curvep obj)"    "1 obj : activeX or ename" "" "")
("pickset:delsameent" "删除重复图元\n参数:\nss:选择集" "(pickset:delsameent ss)" "1 ss  : 选择集\n" "无" "(entity:DelSameEnt (ssget))")
("pickset:pt-verts" "取点" "(pickset:pt-verts ss)" "1 ss  : 选择集\n" "" "")
("pickset:get-sub" "从选择集或图元表中按 filter 规则过滤. 当前版本不支持 XOR 和 逻辑嵌套。" "(pickset:get-sub ss filter)" "1 ss  : 选择集\n2 filter  : 过滤dxf组码\n" "过滤后的图元表" "(pickset:get-sub ss '((-4 . \"<OR\")(1 . \"1*\")(-4 . \">\")(1 . \"7\")(-4 . \"<\")(1 . \"4\")(-4 . \"OR>\")))")
("pickset:ptx" "取选择集4角点坐标的第n个，左下 0 右下 1 右上 2 左上 3" "(pickset:ptx sel n)" "1 sel  : 选择集\n2 n  : 未明确定义\n" "第n个角点坐标" "(pickset:ptx sel 0)")
("pickset:to-array" "选择集->数" "(pickset:to-array ss)" "1 ss  : 选择集\n" "数组" "(pickset->Array (ssget))")
("pickset:erase" "删除选择集图元" "(pickset:erase ss)" "1 ss  : 选择集\n" "最后一个被删除的图元" "")
("pickset:sort" "通用选择集，点表，图元列表排序\n参数:ssPts:选择集，点表，图元列表\n参数:KEY:xyzXYZ 任意组合 ,例如\"yX\",y在前表示y坐标优先，小y表示从小到大(注:二维点时，不能有z)\n参数:FUZZ:允许偏差；若无为nil" "(pickset:sort sspts key fuzz)" "1 sspts  : 选择集\n2 key  : 键，关键字\n3 fuzz  : 容差\n" "结果根据ssPts不同" "")
("pickset:sort-with-dxf" "选择集按照给定的组码值进行排序, INT:如果组码值为一个表，则INT指出使用第几个；否则nil 。K:T表示从大到小，nil表示从小到大 " "(pickset:sort-with-dxf sel dxf-i int fuzz k)" "1 sel  : 选择集\n2 dxf-i  : 组码号\n3 int  : 整数\n4 fuzz  : 容差\n5 k  : 未明确定义\n" "排序后的选择集" "(pickset:sort-with-dxf SS 10 0 5.0 T)表示按照10组码的X坐标值进行排序，允许偏差值为5.0，顺序为从大到小 ")
("pickset:sub" "选择集相减" "(pickset:sub ss1 ss2)" "1 ss1  : 选择集\n2 ss2  : 选择集\n" "选择集 or nil" "(pickset:Sub (setq ss1 (ssget)) (setq ss2 (ssget)))")
("pickset:join" "将第一个选择集中的图元加入到第二个选择集中。" "(pickset:join ss1 ss2)" "1 ss1  : 选择集\n2 ss2  : 选择集\n" "合并后的新选择集" "")
("pickset:to-vlalist" "选择集转为Vla列表" "(pickset:to-vlalist ss)" "1 ss  : 选择集\n" "Vla列表" "pickset->vlalist (ssget))")
("pickset:to-list" "选择集->图元列表" "(pickset:to-list ss)" "1 ss  : 选择集\n" "图元列表" "")
("pickset:ssget-crossline" "取得与线相交的选择集" "(pickset:ssget-crossline ent filter)" "1 ent  : 单个图元\n2 filter  : 过滤dxf组码\n" "选择集" "")
("pickset:from-entlist" "图元列表->选择集" "(pickset:from-entlist entlst)" "1 entlst  : 单个图元\n" "选择集" "")
("pickset:ss-forword-en" "将图元 ent 之后的所有图元形成的选择集" "(pickset:ss-forword-en en)" "1 en  : 单个图元\n" "pickset" "")
("pickset:ssget" "自定义带提示符的ssget " "(pickset:ssget msg params)" "1 msg  : 提示信息\n2 params  : 参数列表\n" "选择集" "(pickset:ssget \"选择对象：\" '(\"_WP\" pt_list ((0 . \"LINE\") (62 . 5))))")
("pickset:getbox" "获取选择集的包围盒。" "(pickset:getbox ss offset)" "1 ss  : 选择集\n2 offset  : 偏移量\n" "外框（偏移后）的左下，右上角点" "(pickset:getbox sel 0.2)")
("point:in-box" "判断 pt1 是否在矩形内" "(point:in-box pt1 pt-box1 pt-box2)" "1 pt1  : 单个2D/3D坐标点\n2 pt-box1  : 单个2D/3D坐标点\n3 pt-box2  : 单个2D/3D坐标点\n" "T or nil" "")
("point:2d->3d" "将一维或二维点转换为3维点，若为一个数值，则将数值转为3维点" "(point:2d->3d pt-2d)" "1 pt-2d  : 单个2D/3D坐标点\n" "三维坐标点" "")
("point:mid" "求两点 pt1 pt2 的中点" "(point:mid pt1 pt2)" "1 pt1  : 单个2D/3D坐标点\n2 pt2  : 单个2D/3D坐标点\n" "中点坐标" "")
("point:3d->2d" "由三维点坐标返回二维点坐标" "(point:3d->2d pt-3d)" "1 pt-3d  : 单个2D/3D坐标点\n" "二维坐标点" "")
("point:rec-2pt->4pt" "根据矩形2点计算矩形4点" "(point:rec-2pt->4pt pt1 pt2)" "1 pt1  : 单个2D/3D坐标点\n2 pt2  : 单个2D/3D坐标点\n" "矩形的四点坐标" "")
("std:protect-assign" "" "(std:protect-assign syms)" "1 syms  : 未明确定义\n" "" "")
("std:return" "返回值函数，用于包装将要返回的值，主要作用还是为了含义更明确。" "(std:return value)" "1 value  : 值\n" "" "")
("std:removemenuitem" "" "(std:removemenuitem popname)" "1 popname  : 未明确定义\n" "" "")
("std:active-document" "返回当前活动文档对象" "(std:active-document )" "None" "" "")
("std:getinput" "获取输入，结合initget和getkword函数" "(std:getinput promptstr inplist default)" "1 promptstr  : 未明确定义\n2 inplist  : 未明确定义\n3 default  : 未明确定义\n" "" "")
("std:textstyles" "返回字体样式集合" "(std:textstyles )" "None" "" "")
("std:addsupportpath" "" "(std:addsupportpath lst)" "1 lst  : 列表\n" "" "")
("std:timer-start" "计时器开始函数" "(std:timer-start )" "None" "计时器全局变量" "")
("std:addmenu" "" "(std:addmenu menugroupname popname popitems insertbeforeitem)" "1 menugroupname  : 未明确定义\n2 popname  : 未明确定义\n3 popitems  : 未明确定义\n4 insertbeforeitem  : 未明确定义\n" "" "")
("std:insertpopmenuitems" "" "(std:insertpopmenuitems popupmenu popitems)" "1 popupmenu  : 未明确定义\n2 popitems  : 未明确定义\n" "" "")
("std:timer-end" "计时器结束函数" "(std:timer-end )" "None" "" "")
("std:acad-object" "返回CAD对象" "(std:acad-object )" "None" "" "")
("std:vla->e" "" "(std:vla->e obj)" "1 obj  : activeX 对象\n" "" "")
("std:reset-system-variable" "" "(std:reset-system-variable )" "None" "" "")
("std:save-system-variable" "" "(std:save-system-variable a)" "1 a  : 未明确定义\n" "" "")
("std:addtoolbars" "" "(std:addtoolbars menugroupname toolbaritems)" "1 menugroupname  : 未明确定义\n2 toolbaritems  : 未明确定义\n" "" "")
("std:endundo" "" "(std:endundo doc)" "1 doc  : 未明确定义\n" "" "")
("std:layers" "返回图层集合" "(std:layers )" "None" "" "")
("std:catchapply" "" "(std:catchapply fun args)" "1 fun  : 未明确定义\n2 args  : 未明确定义\n" "" "")
("std:rgb" "计算RGB颜色对应的整数值。Red Green Blue 取值范围为 [0,255]的整数或[0,1)的小数。" "(std:rgb red green blue)" "1 red  : 未明确定义\n2 green  : 未明确定义\n3 blue  : 未明确定义\n" "RGB颜色值" "(std:rgb 255 0 0) or (std:rgb 0.999 0 0);红色")
("std:removesupportpath" "" "(std:removesupportpath lst)" "1 lst  : 列表\n" "" "")
("std:doc-gen" "" "(std:doc-gen lspfilename)" "1 lspfilename  : 未明确定义\n" "" "")
("std:e->vla" "" "(std:e->vla ename)" "1 ename  : 单个图元\n" "" "")
("std:startundo" "" "(std:startundo doc)" "1 doc  : 未明确定义\n" "" "")
("std:model-space" "返回模型空间对象" "(std:model-space )" "None" "" "")
("std:linetypes" "返回线型集合" "(std:linetypes )" "None" "" "")
("std:unprotect-assign" "" "(std:unprotect-assign syms)" "1 syms  : 未明确定义\n" "" "")
("string:from-list" "列表转成字符串" "(string:from-list lst separator)" "1 lst  : 列表\n2 separator  : 分隔符\n" "" "")
("string:l2s-ansi" "byte or word 整数值列表转字符串。当小于128时，单字节，当两个连续的大于128时，双字节值。用于转换非英文字串时防止重码。" "(string:l2s-ansi lst-str)" "1 lst-str  : 列表\n" "" "")
("string:subst-all" "用 str-new 替换 字符串中所有的 str-old " "(string:subst-all str-new str-old str)" "1 str-new  : 字符串\n2 str-old  : 字符串\n3 str  : 字符串\n" "结果字符串" "(string:subst-all \"abc\" \"qwe\" \"abcpoilde\")")
("string:regexp-search" "正则表达式搜索字串. Express = 正则表达式 key = 字母 i I m M g G的组合字串" "(string:regexp-search string express key)" "1 string  : 字符串\n2 express  : 未明确定义\n3 key  : 键，关键字\n" "" "")
("string:to-list" "字符串转成列表" "(string:to-list str separator)" "1 str  : 字符串\n2 separator  : 分隔符\n" "" "")
("string:number-format" "" "(string:number-format str-num int-n int-fraction)" "1 str-num  : 字符串\n2 int-n  : 整数\n3 int-fraction  : 整数\n" "" "")
("string:rightsubstr" "从右侧求子串" "(string:rightsubstr str start len)" "1 str  : 字符串\n2 start  : 未明确定义\n3 len  : 未明确定义\n" "" "")
("string:sort-by-number" "" "(string:sort-by-number lst)" "1 lst  : 列表\n" "" "")
("string:concat" "连接字符串，连接前进行检测。" "(string:concat strlst)" "1 strlst  : 字符串\n" "" "")
("string:from-lst" "列表转成字符串" "(string:from-lst lst separator)" "1 lst  : 列表\n2 separator  : 分隔符\n" "" "")
("string:lsubstr" "从左侧求子串" "(string:lsubstr str len)" "1 str  : 字符串\n2 len  : 未明确定义\n" "" "")
("string:regexp-replace" "正则表达式替换字串" "(string:regexp-replace string newstr express key)" "1 string  : 字符串\n2 newstr  : 未明确定义\n3 express  : 未明确定义\n4 key  : 键，关键字\n" "" "")
("string:indent" "缩进 lisp 代码" "(string:indent str)" "1 str  : 字符串\n" "" "")
("string:reverse" "倒置字符串" "(string:reverse str)" "1 str  : 字符串\n" "" "")
("string:subst-dqm" "" "(string:subst-dqm )" "None" "" "")
("string:realp" "确定字符串是否为实数" "(string:realp str)" "1 str  : 字符串\n" "" "")
("string:intp" "确定字符串是否为整数" "(string:intp str)" "1 str  : 字符串\n" "" "")
("string:case" "大小写替换" "(string:case a)" "1 a  : 未明确定义\n" "" "")
("string:to-lst" "字符串转成列表" "(string:to-lst str separator)" "1 str  : 字符串\n2 separator  : 分隔符\n" "" "")
("string" "将其它类型转化为字符串。" "(string para)" "1 para  : 未明确定义\n" "" "")
("string:parse-by-lst" "字符串按分隔符列表转列表" "(string:parse-by-lst lstr delimlst)" "1 lstr  : 列表\n2 delimlst  : 未明确定义\n" "拆分后的列表" "(string:parse-by-lst \"a-b=c\" '(\"-\" \"=\"))")
("string:trim-space" "去除字符串中的空格" "(string:trim-space string)" "1 string  : 字符串\n" "" "")
("string:square" "字符串自乘" "(string:square int str)" "1 int  : 整数\n2 str  : 字符串\n" "" "")
("string:format" "字符串格式化函数" "(string:format str formatlist)" "1 str  : 字符串\n2 formatlist  : 未明确定义\n" "" "")
("string:numberp" "确定字符串是否为数字" "(string:numberp str)" "1 str  : 字符串\n" "" "")
("string:rsubstr" "从右侧求子串" "(string:rsubstr str len)" "1 str  : 字符串\n2 len  : 未明确定义\n" "" "")
("string:s2l-ansi" "字符串转字byte or word 整数值列表。当小于128时，单字节，当两个连续的大于128时，双字节值。用于转换非英文字串时防止重码。" "(string:s2l-ansi str)" "1 str  : 字符串\n" "" "")
("table:make" "创建表格，参数: \npt:位置点，\ntitle:标题 ， \nheaders:表头表\nmat-data: 单元数据矩阵,目前仅支持文字型表格" "(table:make pt title headers mat-data)" "1 pt  : 单个2D/3D坐标点\n2 title  : 未明确定义\n3 headers  : 未明确定义\n4 mat-data  : 未明确定义\n" "表格图元" "(table:make (getpoint) \"我的表格\" '(\"列1\" \"列2\" \"列3\")'((5 3 3)(2 3 3)))")
("text:gettextwidth" "" "(text:gettextwidth str edata)" "1 str  : 字符串\n2 edata  : 未明确定义\n" "" "")
("text:stringexplode" "" "(text:stringexplode str_given)" "1 str_given  : 字符串\n" "" "")
("text:mtext->text2" "去除多行文本中的格式化字符串，本函数为测试版，不保证结果正确。" "(text:mtext->text2 str-m)" "1 str-m  : 字符串\n" "结果字符串" "")
("text:mtext->text" "去除多行文本中的格式化字符串，本函数为测试版，不保证结果正确。" "(text:mtext->text str-m)" "1 str-m  : 字符串\n" "结果字符串" "")
("ui:select-multi" "显示列表选择面板，选择多个所需项并返回。" "(ui:select-multi str-subject lst)" "1 str-subject  : 字符串\n2 lst  : 列表\n" "选中的内容" "(ui:select-multi \"请选择你喜欢的人\" '(\"AB\" \"Lisa\"  \"VitalGG\"))")
("ui:input" "显示输入一个或多个文本输入的面板，返回所有文本框的值。\nlst 由一个或多个列表组成 \n    每个元素由 (label 默认值 说明 是否密文/列表及列表默认序号(以0开始)) 组成 。\nlabel 不可省略，默认值、说明和密文/序号 可省略。\n默认值(第二项):\n    当没有默认值及以后各项时，显示为文本编辑框\n    当为数值型和字符串时，且第4项不为列表时显示文本编辑框\n    当为数值型和字符串时，且第4项为列表时显示下拉菜单\n    当为数值型和字符串时，且第4项为 T 时显示密码编辑框\n    当为 T or nil 时，显示复选框，\n    当为列表时，显示下拉菜单。第4项为数字时，为列表默认值索引号。\n" "(ui:input str-subject lst)" "1 str-subject  : 字符串\n2 lst  : 列表\n" "所有输入框的 label 和 值 组成的点对表，或 nil" "(ui:input \"请输入以下内容：\" '((\"Name1\")(\"Name2\" \"VitalGG\" \"带默认值的输入框\") (\"Pass1\" \"123456\" \"密码框\" T) (\"Bool:\" T \"真假值\") (\"Popup1:\" (\"one\" \"two\" \"three\") \"下拉列表\")(\"Popup2:\" 3 \"下拉列表2\" (1 2 3 4 5))))")
("ui:dynquery" "动态查询。显示 func 返回的文本列表。func 是对图标所在图元进行的运算结果。形式如 '(lambda (x) (list (entity:getdxf x 0))) " "(ui:dynquery func)" "1 func  : 未明确定义\n" "nil,执行过程动态显示用户定义的内容" "(ui:dynquery '(lambda (x) (list (entity:getdxf x '(0 8)))))")
("ui:select" "显示列表选择面板，选择所需项并返回。" "(ui:select str-subject lst)" "1 str-subject  : 字符串\n2 lst  : 列表\n" "选中的内容" "(ui:select \"请选择你需要操作的项\" '(\"我愿意\" \"不愿意\"  \"你是一个好人\"))")
("ui:confirm" "确认对话框. 参数：lst-str 单个字符串，或字符串列表。" "(ui:confirm lst-str)" "1 lst-str  : 列表\n" "T or nil" "(ui:confirm \"你遇到真爱了吗?\")\n(ui:confirm '(\"你家门口有两双鞋。\" \"一双是你的。\" \"另一双也是你的。\" \"你感觉孤独吗？\" ) ")
("vla:to-ename" "object转eName,简化函数 o2e." "(vla:to-ename obj)" "1 obj  : activeX 对象\n" "ename entity" "")
("vla:sel" "单选对象。" "(vla:sel )" "None" "VLA-OBJECT 对象" "")
("vla:dump" "列对象属性和方法。" "(vla:dump obj)" "1 obj  : activeX 对象\n" "" "")
("vla:list->array" "表->安全数组类型（一维数组）\n参数：\nnlist:列表，要求数据的类型要和arraytype一致\narraytype:可指定如下常量：可以用后面的数字也可以用前面的类型符号\n" "(vla:list->array nlist arraytype)" "1 nlist  : 未明确定义\n2 arraytype  : 未明确定义\n" "一维数组" "(vla:List->Array '(1 2 3 4) vlax-vbInteger)")
("vla:objarray" "创建vla对象数组\n参    数:lst:vla对象表" "(vla:objarray lst)" "1 lst  : 列表\n" "返 回 值:vla对象数组" "(vla:ObjArray lst)")
("vla:list->arrays" "表->安全数组类型（多维数组，多于二维报错）\narg:\nnlist:列表，要求数据的类型要和arraytype一致，表的各维必须为表\narraytype:可指定如下常量：可以用后面的数字也可以用前面的类型符号" "(vla:list->arrays nlist arraytype)" "1 nlist  : 未明确定义\n2 arraytype  : 未明确定义\n" "多维数组" "vla:List->Arrays '((1 2) (3 4)) vlax-vbInteger)")
("vla:buildfilter" "构建variant列表\n参数：\nfilter:点对列表" "(vla:buildfilter filter)" "1 filter  : 过滤dxf组码\n" "variant列表" "(vla:buildFilter '((1 . \"123\")(2 . \"4556\")))")
("vla:get-value" "变体里取值.参数 var:变体或者数组" "(vla:get-value var)" "1 var  : 未明确定义\n" "数据列表" "(vla:get-value var)")
("vla:objectvariant" "创建vla对象表变体.\n参数：\nlst:vla对象表" "(vla:objectvariant lst)" "1 lst  : 列表\n" "变体" "(vla:ObjectVariant lst)")
("vla:enamelist->vla" "图元列表转为Vla列表\narg:\nlst:图元列表" "(vla:enamelist->vla lst)" "1 lst  : 列表\n" "Vla列表" "(vla:enamelist->vla lst)"))
