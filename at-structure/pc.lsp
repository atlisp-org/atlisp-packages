(@:add-menu "装配式" "PC板统计" "(list-rec-wxh:pc-slab)" )
(defun @:get-lwpoints (en0 / ddlist dd1 tmplist )
  "生成多段线的点序"
  (setq ddlist nil) 
  (setq tmplist (entget en0))
  (repeat 
   (cdr (assoc 90 (entget en0))) ;;计算节点数
   (setq dd1 (cdr (assoc 10 tmplist))) ;;取顶点数据
   (setq tmplist (member (assoc 10 tmplist) tmplist))
   (setq tmplist (cdr tmplist))
   (setq ddlist (append ddlist (list dd1) )) ;;下一个顶点
   )
  )
(defun list-rec-wxh:pc-slab ( / recs en% en0 pts pt1 i% tmp-pts result-pts area% angle%)
  (@:help (strcat "统计有圆角或倒角的矩形的长宽并形成列表"))
  (setq recs (ssget '((0 . "LWPOLYLINE")(8 . "PC-SLAB")
		      (-4  . "<AND")
		      (-4 . ">=")(90 . 4)
		      (-4 . "<=")(90 . 8)
		      (-4 . "AND>"))))
  (setq en% 0)
  (setq pt1 (getpoint "请点取列表位置: "))
    (while (< en% (sslength recs))
    (setq en0 (ssname recs en%))
    (setq pts (@:get-lwpoints en0))
    ;; 坐标变换直到面积最小
    (setq i% 0)
    (setq tmp-pts pts)
    (setq result-pts pts)
    (setq area% (* (- (apply 'max (mapcar 'car pts))
		      (apply 'min (mapcar 'car pts))
		      )
		   (- (apply 'max (mapcar 'cadr pts))
		      (apply 'min (mapcar 'cadr pts))
		      )))
    (while (< i% 3)
      (setq angle% (- (angle (nth i% pts)(nth (1+ i%) pts))))
      (setq tmp-pts (mapcar '(lambda (x) (m:coordinate-rotate x angle%)) pts))
      (if  (> area% (* (- (apply 'max (mapcar 'car tmp-pts))
			  (apply 'min (mapcar 'car tmp-pts))
			  )
		       (- (apply 'max (mapcar 'cadr tmp-pts))
			  (apply 'min (mapcar 'cadr tmp-pts))
			  )))
	   (progn
	     (setq result-pts tmp-pts)
	     (setq area%  (* (- (apply 'max (mapcar 'car tmp-pts))
				(apply 'min (mapcar 'car tmp-pts))
				)
			     (- (apply 'max (mapcar 'cadr tmp-pts))
				(apply 'min (mapcar 'cadr tmp-pts))
				)))))
      (setq i% (1+ i%)))
      
    (entity:make-text 
     (format nil "~dx~d"
	     (min (- (apply 'max (mapcar 'car result-pts))
		     (apply 'min (mapcar 'car result-pts))
		     )
		  (- (apply 'max (mapcar 'cadr result-pts))
		     (apply 'min (mapcar 'cadr result-pts))
		     ))
	     (max (- (apply 'max (mapcar 'car result-pts))
		     (apply 'min (mapcar 'car result-pts))
		     )
		  (- (apply 'max (mapcar 'cadr result-pts))
		     (apply 'min (mapcar 'cadr result-pts))
		     ))
	     )
     (polar pt1 (* 1.5 pi) (* (1+ en%) 500)) 350 0 0.8 0 13)
    (entity:make-leader (nth 0 pts) (polar pt1 (* 1.5 pi) (* (1+ en%) 500)))
    (setq en% (1+ en%))
    ))

(@:add-menu "装配式" "PC板标注" "(@structure:dim-slab)" )
(defun @structure:dim-slab ( / recs en% en0 pts pt1 i% tmp-pts result-pts area% angle%)
  (@:help (strcat "统计有圆角或倒角的矩形的长宽并形成列表"))
  (setq recs (ssget '((0 . "LWPOLYLINE")(8 . "PC-SLAB")
		      (-4  . "<AND")
		      (-4 . ">=")(90 . 4)
		      (-4 . "<=")(90 . 8)
		      (-4 . "AND>"))))
  (setq en% 0)
  ;; (setq pt1 (getpoint "请点取列表位置: "))
  (while (< en% (sslength recs))
    (setq en0 (ssname recs en%))
    (setq pts (@:get-lwpoints en0))
    ;; 坐标变换直到面积最小
    (setq i% 0)
    (setq tmp-pts pts)
    (setq result-pts pts)
    (setq area% (* (- (apply 'max (mapcar 'car pts))
		      (apply 'min (mapcar 'car pts))
		      )
		   (- (apply 'max (mapcar 'cadr pts))
		      (apply 'min (mapcar 'cadr pts))
		      )))
    (while (< i% 3)
      (setq angle% (- (angle (nth i% pts)(nth (1+ i%) pts))))
      (setq tmp-pts (mapcar '(lambda (x) (m:coordinate-rotate x angle%)) pts))
      (if  (> area% (* (- (apply 'max (mapcar 'car tmp-pts))
			  (apply 'min (mapcar 'car tmp-pts))
			  )
		       (- (apply 'max (mapcar 'cadr tmp-pts))
			  (apply 'min (mapcar 'cadr tmp-pts))
			  )))
	   (progn
	     (setq result-pts tmp-pts)
	     (setq area%  (* (- (apply 'max (mapcar 'car tmp-pts))
				(apply 'min (mapcar 'car tmp-pts))
				)
			     (- (apply 'max (mapcar 'cadr tmp-pts))
				(apply 'min (mapcar 'cadr tmp-pts))
				)))))
      (setq i% (1+ i%)))
      
    (entity:make-text 
     (format nil "DBS1:~dx~d"
	     (round (min (- (apply 'max (mapcar 'car result-pts))
			  (apply 'min (mapcar 'car result-pts))
			  )
		       (- (apply 'max (mapcar 'cadr result-pts))
			  (apply 'min (mapcar 'cadr result-pts))
			  )))
	     (round (max (- (apply 'max (mapcar 'car result-pts))
			  (apply 'min (mapcar 'car result-pts))
			  )
		       (- (apply 'max (mapcar 'cadr result-pts))
			  (apply 'min (mapcar 'cadr result-pts))
		     )))
	     )
     (list (* 0.5 (+ (apply 'max (mapcar 'car result-pts))
		     (apply 'min (mapcar 'car result-pts))))
	   (* 0.5 (+ (apply 'max (mapcar 'cadr result-pts))
		     (apply 'min (mapcar 'cadr result-pts))
			  )))
     250 0 0.8 0 22)
    (setq en% (1+ en%))
    ))

